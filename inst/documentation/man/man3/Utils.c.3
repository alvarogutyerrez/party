.TH "Utils.c" 3 "24 Sep 2007" "party" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Utils.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'party.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBC_kronecker\fP (const double *A, const int m, const int n, const double *B, const int r, const int s, double *ans)"
.br
.ti -1c
.RI "SEXP \fBR_kronecker\fP (SEXP A, SEXP B)"
.br
.ti -1c
.RI "void \fBCR_La_svd\fP (SEXP jobu, SEXP jobv, SEXP x, SEXP s, SEXP u, SEXP v, SEXP method)"
.br
.ti -1c
.RI "SEXP \fBCR_svd\fP (SEXP x, SEXP svdmem)"
.br
.ti -1c
.RI "void \fBC_MPinv\fP (SEXP x, double tol, SEXP svdmem, SEXP ans)"
.br
.ti -1c
.RI "SEXP \fBR_MPinv\fP (SEXP x, SEXP tol, SEXP svdmem)"
.br
.ti -1c
.RI "double \fBC_max\fP (const double *x, const int n)"
.br
.ti -1c
.RI "SEXP \fBR_max\fP (SEXP x)"
.br
.ti -1c
.RI "void \fBC_abs\fP (double *x, int n)"
.br
.ti -1c
.RI "SEXP \fBR_abs\fP (SEXP x)"
.br
.ti -1c
.RI "void \fBC_matprod\fP (double *x, int nrx, int ncx, double *y, int nry, int ncy, double *z)"
.br
.ti -1c
.RI "SEXP \fBR_matprod\fP (SEXP x, SEXP y)"
.br
.ti -1c
.RI "void \fBC_matprodT\fP (double *x, int nrx, int ncx, double *y, int nry, int ncy, double *z)"
.br
.ti -1c
.RI "SEXP \fBR_matprodT\fP (SEXP x, SEXP y)"
.br
.ti -1c
.RI "void \fBC_SampleNoReplace\fP (int *x, int m, int k, int *ans)"
.br
.ti -1c
.RI "SEXP \fBR_permute\fP (SEXP m)"
.br
.ti -1c
.RI "SEXP \fBR_rsubset\fP (SEXP m, SEXP k)"
.br
.ti -1c
.RI "void \fBC_ProbSampleNoReplace\fP (int n, double *p, int *perm, int nans, int *ans)"
.br
.ti -1c
.RI "int \fBi_in_set\fP (int i, int *iset, int p)"
.br
.ti -1c
.RI "int \fBC_i_in_set\fP (int i, SEXP set)"
.br
.ti -1c
.RI "int \fBnrow\fP (SEXP x)"
.br
.ti -1c
.RI "int \fBncol\fP (SEXP x)"
.br
.ti -1c
.RI "int \fBC_whichmax\fP (double *pvalue, double *teststat, int ninputs)"
.br
.ti -1c
.RI "SEXP \fBR_whichmax\fP (SEXP x, SEXP y)"
.br
.ti -1c
.RI "SEXP \fBR_listplus\fP (SEXP a, SEXP b, SEXP which)"
.br
.ti -1c
.RI "SEXP \fBR_modify_response\fP (SEXP x, SEXP vf)"
.br
.ti -1c
.RI "double F77_SUB() \fBunifrnd\fP (void)"
.br
.ti -1c
.RI "void \fBC_SampleSplitting\fP (int n, double *prob, int *weights, int k)"
.br
.ti -1c
.RI "void \fBC_remove_weights\fP (SEXP subtree)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Some commonly needed utility functions.
.PP
\fBAuthor:\fP
.RS 4
\fBAuthor\fP.RS 4
hothorn 
.RE
.PP
.RE
.PP
\fBDate:\fP
.RS 4
\fBDate\fP.RS 4
2007-07-23 12:53:33 +0200 (Mon, 23 Jul 2007) 
.RE
.PP
.RE
.PP

.PP
Definition in file \fBUtils.c\fP.
.SH "Function Documentation"
.PP 
.SS "void C_abs (double * x, int n)"
.PP
absolute value 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP numeric vector 
.br
\fIn\fP length(x) 
.RE
.PP

.PP
Definition at line 315 of file Utils.c.
.PP
Referenced by C_absstandardize(), and R_abs().
.SS "int C_i_in_set (int i, SEXP set)"
.PP
Definition at line 564 of file Utils.c.
.PP
References i_in_set().
.PP
Referenced by C_get_node().
.SS "void C_kronecker (const double * A, const int m, const int n, const double * B, const int r, const int s, double * ans)"
.PP
Computes the Kronecker product of two matrices
.br
 
.PP
\fBParameters:\fP
.RS 4
\fIA\fP matrix 
.br
\fIm\fP nrow(A) 
.br
\fIn\fP ncol(A) 
.br
\fIB\fP matrix 
.br
\fIr\fP nrow(B) 
.br
\fIs\fP ncol(B) 
.br
\fIans\fP return value; a pointer to a REALSXP-vector of length (mr x ns) 
.RE
.PP

.PP
Definition at line 23 of file Utils.c.
.PP
Referenced by R_kronecker().
.SS "void C_matprod (double * x, int nrx, int ncx, double * y, int nry, int ncy, double * z)"
.PP
matrix product x *% y 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP a matrix 
.br
\fInrx\fP number of rows of x 
.br
\fIncx\fP number of cols of x 
.br
\fIy\fP a matrix 
.br
\fInry\fP number of rows of y 
.br
\fIncy\fP number of cols of y 
.br
\fIz\fP a matrix of dimension nrx x ncy 
.RE
.PP

.PP
Definition at line 353 of file Utils.c.
.PP
Referenced by R_matprod().
.SS "void C_matprodT (double * x, int nrx, int ncx, double * y, int nry, int ncy, double * z)"
.PP
matrix product x *% t(y) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP a matrix 
.br
\fInrx\fP number of rows of x 
.br
\fIncx\fP number of cols of x 
.br
\fIy\fP a matrix 
.br
\fInry\fP number of rows of y 
.br
\fIncy\fP number of cols of y 
.br
\fIz\fP a matrix of dimension nrx x ncy 
.RE
.PP

.PP
Definition at line 405 of file Utils.c.
.PP
Referenced by R_matprodT().
.SS "double C_max (const double * x, const int n)"
.PP
the maximum of a double vector 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP vector 
.br
\fIn\fP its length 
.RE
.PP

.PP
Definition at line 278 of file Utils.c.
.PP
Referenced by C_maxabsTestStatistic(), C_Node(), and R_max().
.SS "void C_MPinv (SEXP x, double tol, SEXP svdmem, SEXP ans)"
.PP
Moore-Penrose inverse of a matrix 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP matrix 
.br
\fItol\fP a tolerance bound 
.br
\fIsvdmem\fP an object of class `svd_mem' 
.br
\fIans\fP return value; an object of class `ExpectCovarMPinv' 
.RE
.PP

.PP
Definition at line 185 of file Utils.c.
.PP
References CR_svd(), PL2_MPinvSym, PL2_rankSym, PL2_sSym, PL2_uSym, and PL2_vSym.
.PP
Referenced by C_LinStatExpCovMPinv(), and R_MPinv().
.SS "void C_ProbSampleNoReplace (int n, double * p, int * perm, int nans, int * ans)"
.PP
Definition at line 508 of file Utils.c.
.PP
Referenced by C_SampleSplitting().
.SS "void C_remove_weights (SEXP subtree)"
.PP
Remove weights vector from each node of a tree (in order to save memory) \\*param subtree a tree 
.PP
Definition at line 702 of file Utils.c.
.PP
References C_remove_weights(), S3_WEIGHTS, S3get_leftnode(), S3get_nodeterminal(), and S3get_rightnode().
.PP
Referenced by C_remove_weights().
.SS "void C_SampleNoReplace (int * x, int m, int k, int * ans)"
.PP
compute a permutation of a (random subset of) 0:(m-1) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP an integer vector of length m 
.br
\fIm\fP integer 
.br
\fIk\fP integer 
.br
\fIans\fP an integer vector of length k 
.RE
.PP

.PP
Definition at line 453 of file Utils.c.
.PP
Referenced by R_permute(), and R_rsubset().
.SS "void C_SampleSplitting (int n, double * prob, int * weights, int k)"
.PP
Definition at line 679 of file Utils.c.
.PP
References C_ProbSampleNoReplace().
.SS "int C_whichmax (double * pvalue, double * teststat, int ninputs)"
.PP
Definition at line 583 of file Utils.c.
.PP
Referenced by C_Node(), and R_whichmax().
.SS "void CR_La_svd (SEXP jobu, SEXP jobv, SEXP x, SEXP s, SEXP u, SEXP v, SEXP method)"
.PP
C- and R-interface to La_svd 
.PP
\fBParameters:\fP
.RS 4
\fIjobu\fP 
.br
\fIjobv\fP 
.br
\fIx\fP 
.br
\fIs\fP 
.br
\fIu\fP 
.br
\fIv\fP 
.br
\fImethod\fP 
.RE
.PP

.PP
Definition at line 102 of file Utils.c.
.SS "SEXP CR_svd (SEXP x, SEXP svdmem)"
.PP
C- and R-interface to CR_La_svd 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP matrix 
.br
\fIsvdmem\fP an object of class `svd_mem' 
.RE
.PP

.PP
Definition at line 153 of file Utils.c.
.PP
References nrow(), PL2_pSym, PL2_uSym, and PL2_vSym.
.PP
Referenced by C_MPinv().
.SS "int i_in_set (int i, int * iset, int p)"
.PP
determine if i is element of the integer vector set 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP an integer 
.br
\fIiset\fP a pointer to an integer vector 
.br
\fIp\fP length(iset) 
.RE
.PP

.PP
Definition at line 549 of file Utils.c.
.PP
Referenced by C_i_in_set(), and C_splitnode().
.SS "int ncol (SEXP x)"
.PP
Definition at line 575 of file Utils.c.
.PP
Referenced by C_GlobalTest(), C_IndependenceTest(), C_Node(), C_splitnode(), R_ExpectCovarInfluence(), R_ExpectCovarLinearStatistic(), R_LinearStatistic(), R_matprod(), R_matprodT(), R_MPinv(), R_Node(), R_split(), R_splitcategorical(), and R_TreeGrow().
.SS "int nrow (SEXP x)"
.PP
Definition at line 571 of file Utils.c.
.PP
Referenced by C_IndependenceTest(), CR_svd(), R_ExpectCovarInfluence(), R_ExpectCovarLinearStatistic(), R_LinearStatistic(), R_matprod(), R_matprodT(), R_maxabsConditionalPvalue(), R_MPinv(), R_PermutedLinearStatistic(), R_split(), and R_splitcategorical().
.SS "SEXP R_abs (SEXP x)"
.PP
R-interface to C_abs 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP numeric vector 
.RE
.PP

.PP
Definition at line 327 of file Utils.c.
.PP
References C_abs().
.SS "SEXP R_kronecker (SEXP A, SEXP B)"
.PP
R-interface to C_kronecker 
.PP
\fBParameters:\fP
.RS 4
\fIA\fP matrix 
.br
\fIB\fP matrix 
.RE
.PP

.PP
Definition at line 52 of file Utils.c.
.PP
References C_kronecker().
.SS "SEXP R_listplus (SEXP a, SEXP b, SEXP which)"
.PP
Definition at line 618 of file Utils.c.
.SS "SEXP R_matprod (SEXP x, SEXP y)"
.PP
R-interface to C_matprod 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP a matrix 
.br
\fIy\fP a matrix 
.RE
.PP

.PP
Definition at line 374 of file Utils.c.
.PP
References C_matprod(), ncol(), and nrow().
.SS "SEXP R_matprodT (SEXP x, SEXP y)"
.PP
R-interface to C_matprodT 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP a matrix 
.br
\fIy\fP a matrix 
.RE
.PP

.PP
Definition at line 426 of file Utils.c.
.PP
References C_matprodT(), ncol(), and nrow().
.SS "SEXP R_max (SEXP x)"
.PP
R-interface to C_max 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP numeric vector 
.RE
.PP

.PP
Definition at line 294 of file Utils.c.
.PP
References C_max().
.SS "SEXP R_modify_response (SEXP x, SEXP vf)"
.PP
Definition at line 650 of file Utils.c.
.PP
References get_predict_trafo(), get_test_trafo(), get_transformation(), and get_variable().
.SS "SEXP R_MPinv (SEXP x, SEXP tol, SEXP svdmem)"
.PP
R-interface to C_MPinv 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP matrix 
.br
\fItol\fP a tolerance bound 
.br
\fIsvdmem\fP an object of class `svd_mem' 
.RE
.PP

.PP
Definition at line 243 of file Utils.c.
.PP
References C_MPinv(), ncol(), nrow(), PL2_MPinvSym, PL2_pSym, and PL2_rankSym.
.SS "SEXP R_permute (SEXP m)"
.PP
R-interface to C_SampleNoReplace: the permutation case 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP integer 
.RE
.PP

.PP
Definition at line 472 of file Utils.c.
.PP
References C_SampleNoReplace().
.SS "SEXP R_rsubset (SEXP m, SEXP k)"
.PP
R-interface to C_SampleNoReplace: the subset case 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP integer 
.br
\fIk\fP integer 
.RE
.PP

.PP
Definition at line 492 of file Utils.c.
.PP
References C_SampleNoReplace().
.SS "SEXP R_whichmax (SEXP x, SEXP y)"
.PP
Definition at line 608 of file Utils.c.
.PP
References C_whichmax().
.SS "double F77_SUB() unifrnd (void)"
.PP
Definition at line 677 of file Utils.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for party from the source code.
