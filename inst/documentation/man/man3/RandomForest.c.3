.TH "RandomForest.c" 3 "6 Jun 2008" "party" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RandomForest.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'party.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "SEXP \fBR_Ensemble\fP (SEXP learnsample, SEXP weights, SEXP bwhere, SEXP bweights, SEXP fitmem, SEXP controls)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Random forest with conditional inference trees
.PP
\fBAuthor:\fP
.RS 4
.RE
.PP
\fBAuthor\fP.RS 4
hothorn 
.RE
.PP
\fBDate:\fP
.RS 4
.RE
.PP
\fBDate\fP.RS 4
2007-07-23 10:09:38 +0200 (Mon, 23 Jul 2007) 
.RE
.PP

.PP
Definition in file \fBRandomForest.c\fP.
.SH "Function Documentation"
.PP 
.SS "SEXP R_Ensemble (SEXP learnsample, SEXP weights, SEXP bwhere, SEXP bweights, SEXP fitmem, SEXP controls)"
.PP
An experimental implementation of random forest like algorithms 
.br
 
.PP
\fBParameters:\fP
.RS 4
\fIlearnsample\fP an object of class `LearningSample' 
.br
\fIweights\fP a vector of case weights 
.br
\fIbwhere\fP integer matrix (n x ntree) for terminal node numbers 
.br
\fIbweights\fP double matrix (n x ntree) for bootstrap case weights 
.br
\fIfitmem\fP an object of class `TreeFitMemory' 
.br
\fIcontrols\fP an object of class `TreeControl' 
.RE
.PP

.PP
Definition at line 22 of file RandomForest.c.
.PP
References C_init_node(), C_remove_weights(), C_SampleSplitting(), C_TreeGrow(), get_fraction(), get_maxsurrogate(), get_ninputs(), get_nobs(), get_ntree(), get_predict_trafo(), get_replace(), get_splitctrl(), ncol(), NODE_LENGTH, PL2_responsesSym, and S3get_nodeweights().
.SH "Author"
.PP 
Generated automatically by Doxygen for party from the source code.
